REACT frontend:
npm create vite@latest . -- --template react

npm install

npm run dev

npm install react-router-dom

npm i axios

React frontend with TypeScript: my-app is folder name, can be changed

npm create vite@latest . -- --template react-ts
 cd my-app // no need
  npm install
  npm run dev

npm i yup  // import * as yup from "yup"; // kaip joi backendo validationsui naudoti

npm install --save-dev @types/react //css module priemimas

// kai 5 esama react aplanka papildomai diegamas typescript:
npm install --save-dev typescript @types/react @types/react-dom
// ir sukurti faila src aplanke: global.d.ts jame prid4ti:

declare module "*.module.css" {
  const styles: { [key: string]: string };
  export default styles;
}


eslint:
'react/prop-types': 'off',

----------- Backend:

npm init -y

npm i express dotenv pg      -(dbeaver database - pg)  (mongoDb - mongoose)

3. package.json add: 
,
"type": "module"

4. create server.js

5. nodemon server.js (paleidziam serveri)

6. susikuriam env, tada routers, controllers, db

7. kuomet pradedama dirbti ir su frontend, instal: npm i corse in backend


put: http://localhost:5002/task/ prekes id

{
  "title": "cook",
  "description":"tacos",
  "column": "67d85aff83e23ad20ae62950",
  "estimation": 1
}


typescript back ende:
 
1. npm init -y
2. npm install --save-dev typescript @types/node ts-node
3. npx tsc --init (sukurs tsconfig.json fila)
4. src aplanką sukurti 
5. jame server.ts
6. pacage.json įvesti script:
 "scripts": {
    "dev": "ts-node src/server.ts",
      "build": "tsc"
  },
7. tconfig.json faile atkomenyuojame:     // "outDir": "./",  
7.1 nurodome aplanką jame: "outDir": "./build",
8. papildom package.json:
 "scripts": {
    "dev": "ts-node src/server.ts",
      "build": "tsc",
      "start": "node build/server.js"
  },

9. pridedam: npm i express dotenv
10. ht refresh: npm i -D nodemon
11. sukurti paskaita 14 nauja aplanka: nodemon.json
12 įkelk į jį:
{
  "watch": ["src"],
  "ext": "ts",
  "ignore": ["node_modules"],
  "exec": "ts-node ./src/server.ts"
}

13. package.json file atnaujinti:
 "scripts": {
    "dev": "nodemon",
    "build": "tsc",
    "start": "node build/server.js"
  },




heshing:
 npm i bcryptjs
npm i jsonwebtoken


cookies backende installint:
npm i cookie-parser


instaliuojama į frontend, kad perkelti routus į frontend:

npm i react-router-dom